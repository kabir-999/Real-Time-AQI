services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - aqi-network

  kafka:
    image: confluentinc/cp-kafka:7.7.1
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9095:9095"
      - "9096:9096"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9095
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9095
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - aqi-network

  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_DB: aqi_db
      POSTGRES_USER: aqi_user
      POSTGRES_PASSWORD: aqi_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../src/database/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "aqi_user", "-d", "aqi_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - aqi-network

  # Using lighter Spark images - these are smaller than the full Bitnami images
  # but still contain all necessary components for development
  spark-master:
    image: bitnami/spark:3.5.3
    container_name: spark-master
    environment:
      SPARK_MODE: master
      SPARK_RPC_AUTHENTICATION_ENABLED: no
      SPARK_RPC_ENCRYPTION_ENABLED: no
      SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED: no
      SPARK_SSL_ENABLED: no
    ports:
      - "8081:8080"
      - "7077:7077"
    volumes:
      - ../libs/spark-sql-kafka-0-10_2.12-3.5.0.jar:/opt/bitnami/spark/jars/spark-sql-kafka-0-10_2.12-3.5.0.jar
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "-f", "org.apache.spark.deploy.master.Master"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - aqi-network

  spark-worker:
    image: bitnami/spark:3.5.3
    container_name: spark-worker
    environment:
      SPARK_MODE: worker
      SPARK_MASTER_URL: spark://spark-master:7077
      SPARK_WORKER_MEMORY: 2g
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_WEBUI_PORT: 8082
    depends_on:
      spark-master:
        condition: service_healthy
    volumes:
      - ../src/processors/spark_streaming/workdirs:/opt/bitnami/spark/workdirs
      - ../libs/spark-sql-kafka-0-10_2.12-3.5.0.jar:/opt/bitnami/spark/jars/spark-sql-kafka-0-10_2.12-3.5.0.jar
    ports:
      - "8082:8082"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "-f", "org.apache.spark.deploy.worker.Worker"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - aqi-network

  # --- Airflow Services ---

  airflow-postgres:
    image: postgres:15
    container_name: airflow-postgres
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow-postgres-data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - aqi-network

  airflow-webserver:
    image: apache/airflow:2.9.2
    container_name: airflow-webserver
    depends_on:
      airflow-postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres:5432/airflow
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres:5432/airflow
    ports:
      - "8080:8080"
    volumes:
      - ../airflow/dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - ../src/processors/spark_streaming:/opt/airflow/spark_streaming
      - ../src/producers/kafka_producer:/opt/airflow/kafka_producer
      - ../data/air_quality_health_dataset.csv:/opt/airflow/air_quality_health_dataset.csv
      - ../requirements.txt:/opt/airflow/requirements.txt
      - ../src/producers/enhanced_producer.py:/opt/airflow/enhanced_producer.py
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - aqi-network
    command: bash -c "pip install --timeout=300 --retries=3 --no-cache-dir -r /opt/airflow/requirements.txt && airflow db init && airflow webserver"

  airflow-scheduler:
    image: apache/airflow:2.9.2
    container_name: airflow-scheduler
    depends_on:
      airflow-postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres:5432/airflow
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres:5432/airflow
    volumes:
      - ../airflow/dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - ../src/processors/spark_streaming:/opt/airflow/spark_streaming
      - ../src/producers/kafka_producer:/opt/airflow/kafka_producer
      - ../data/air_quality_health_dataset.csv:/opt/airflow/air_quality_health_dataset.csv
      - ../requirements.txt:/opt/airflow/requirements.txt
      - ../src/producers/enhanced_producer.py:/opt/airflow/enhanced_producer.py
    restart: unless-stopped
    networks:
      - aqi-network
    command: bash -c "pip install --timeout=300 --retries=3 --no-cache-dir -r /opt/airflow/requirements.txt && airflow db init && airflow scheduler"

  aqi-web-dashboard:
    build:
      context: ..
      dockerfile: docker/Dockerfile.web
    container_name: aqi-web-dashboard
    ports:
      - "8000:8000"
    environment:
      POSTGRES_HOST: host.docker.internal
      POSTGRES_PORT: 5433
      POSTGRES_DB: aqi_db
      POSTGRES_USER: aqi_user
      POSTGRES_PASSWORD: aqi_password
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - aqi-network

volumes:
  postgres_data:
  airflow-postgres-data:
  airflow-dags:
  airflow-logs:

networks:
  aqi-network:
    driver: bridge
